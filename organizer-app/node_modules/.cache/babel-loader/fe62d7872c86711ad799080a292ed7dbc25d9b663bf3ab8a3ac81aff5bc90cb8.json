{"ast":null,"code":"const vapidPublicKey=process.env.REACT_APP_PUBLIC_VAPID_KEY;const urlBase64ToUint8Array=base64String=>{const padding='='.repeat((4-base64String.length%4)%4);const base64=(base64String+padding).replace(/-/g,'+').replace(/_/g,'/');const rawData=atob(base64);const outputArray=new Uint8Array(rawData.length);for(let i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}return outputArray;};export const subscribeUser=async()=>{if('serviceWorker'in navigator&&'PushManager'in window){try{const registration=await navigator.serviceWorker.ready;const existingSubscription=await registration.pushManager.getSubscription();if(existingSubscription){console.log('User is already subscribed');// Optionally: Send request to update subscription if server-side changes\nreturn;}const newSubscription=await registration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:urlBase64ToUint8Array(vapidPublicKey)});const pushSubscription={endpoint:newSubscription.endpoint,expirationTime:newSubscription.expirationTime,keys:{p256dh:newSubscription.getKey('p256dh')?btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('p256dh')))):'',auth:newSubscription.getKey('auth')?btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('auth')))):''}};const response=await fetch('/api/notifications/subscribe',{method:'POST',body:JSON.stringify({subscription:pushSubscription}),headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"Server responded with status \".concat(response.status));}const responseData=await response.json();console.log('Server response:',responseData);}catch(error){console.error('Error subscribing to push notifications:',error);}}else{console.warn('Push notifications or service worker are not supported in this browser.');}};export const unsubscribeUser=async()=>{if('serviceWorker'in navigator&&'PushManager'in window){try{const registration=await navigator.serviceWorker.ready;const subscription=await registration.pushManager.getSubscription();if(subscription){await subscription.unsubscribe();// Notify server to remove subscription\nawait fetch('/api/notifications/unsubscribe',{method:'POST',body:JSON.stringify({endpoint:subscription.endpoint}),headers:{'Content-Type':'application/json'}});}}catch(error){console.error('Error unsubscribing from push notifications:',error);}}else{console.warn('Push notifications or service worker are not supported in this browser.');}};","map":{"version":3,"names":["vapidPublicKey","process","env","REACT_APP_PUBLIC_VAPID_KEY","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","subscribeUser","navigator","window","registration","serviceWorker","ready","existingSubscription","pushManager","getSubscription","console","log","newSubscription","subscribe","userVisibleOnly","applicationServerKey","pushSubscription","endpoint","expirationTime","keys","p256dh","getKey","btoa","String","fromCharCode","auth","response","fetch","method","body","JSON","stringify","subscription","headers","ok","Error","concat","status","responseData","json","error","warn","unsubscribeUser","unsubscribe"],"sources":["/home/pratibha/Pictures/Organizer/organizer-app/src/utils/subscribe.js"],"sourcesContent":["const vapidPublicKey = process.env.REACT_APP_PUBLIC_VAPID_KEY;\n\nconst urlBase64ToUint8Array = (base64String) => {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\n\nexport const subscribeUser = async () => {\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const existingSubscription = await registration.pushManager.getSubscription();\n\n      if (existingSubscription) {\n        console.log('User is already subscribed');\n        // Optionally: Send request to update subscription if server-side changes\n        return;\n      }\n\n      const newSubscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)\n      });\n\n      const pushSubscription = {\n        endpoint: newSubscription.endpoint,\n        expirationTime: newSubscription.expirationTime,\n        keys: {\n          p256dh: newSubscription.getKey('p256dh') ? btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('p256dh')))) : '',\n          auth: newSubscription.getKey('auth') ? btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('auth')))) : ''\n        }\n      };\n\n      const response = await fetch('/api/notifications/subscribe', {\n        method: 'POST',\n        body: JSON.stringify({ subscription: pushSubscription }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server responded with status ${response.status}`);\n      }\n\n      const responseData = await response.json();\n      console.log('Server response:', responseData);\n\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n    }\n  } else {\n    console.warn('Push notifications or service worker are not supported in this browser.');\n  }\n};\n\n\nexport const unsubscribeUser = async () => {\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n\n      if (subscription) {\n        await subscription.unsubscribe();\n\n        // Notify server to remove subscription\n        await fetch('/api/notifications/unsubscribe', {\n          method: 'POST',\n          body: JSON.stringify({ endpoint: subscription.endpoint }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error unsubscribing from push notifications:', error);\n    }\n  } else {\n    console.warn('Push notifications or service worker are not supported in this browser.');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}