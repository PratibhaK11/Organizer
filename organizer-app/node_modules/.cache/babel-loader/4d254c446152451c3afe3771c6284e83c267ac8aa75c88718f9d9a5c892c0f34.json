{"ast":null,"code":"import React,{useState,useEffect}from'react';// Convert a base64 string to a Uint8Array\nconst urlBase64ToUint8Array=base64String=>{const padding='='.repeat((4-base64String.length%4)%4);const base64=(base64String+padding).replace(/-/g,'+').replace(/_/g,'/');const rawData=atob(base64);const outputArray=new Uint8Array(rawData.length);for(let i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}return outputArray;};// Subscribe the user to push notifications\nexport const subscribeUser=async()=>{if('serviceWorker'in navigator&&'PushManager'in window){try{// Ensure service worker is ready\nconst registration=await navigator.serviceWorker.ready;// Check if there is an existing subscription\nconst existingSubscription=await registration.pushManager.getSubscription();if(existingSubscription){// Check if the subscription is already stored on the server\nconst response=await fetch('/api/notifications/check-subscription',{method:'POST',body:JSON.stringify({endpoint:existingSubscription.endpoint}),headers:{'Content-Type':'application/json'}});if(response.ok){const responseData=await response.json();if(responseData.isSubscribed){console.log('User is already subscribed');return;}}else{throw new Error(\"Server responded with status \".concat(response.status));}}// Subscribe the user\nconst applicationServerKey=urlBase64ToUint8Array('BA36MmQvZeXCN6SoOkl5JeSVK0ADziCwPOEINUasNfAGOh10wV3CoqHVx7dZBuYQY4TsC_k578Ro3W4djca2GFs');const newSubscription=await registration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:applicationServerKey});// Format subscription for server\nconst pushSubscription={endpoint:newSubscription.endpoint,expirationTime:newSubscription.expirationTime,keys:{p256dh:newSubscription.getKey('p256dh')?btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('p256dh')))):'',auth:newSubscription.getKey('auth')?btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('auth')))):''}};// Send the subscription to your server\nconst response=await fetch('/api/notifications/subscribe',{method:'POST',body:JSON.stringify({subscription:pushSubscription}),headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"Server responded with status \".concat(response.status));}const responseData=await response.json();console.log('Server response:',responseData);}catch(error){console.error('Error subscribing to push notifications:',error);}}else{console.warn('Push notifications or service worker are not supported in this browser.');}};// Unsubscribe the user from push notifications\nexport const unsubscribeUser=async()=>{if('serviceWorker'in navigator&&'PushManager'in window){try{const registration=await navigator.serviceWorker.ready;const subscription=await registration.pushManager.getSubscription();if(subscription){await subscription.unsubscribe();// Notify the server to remove the subscription\nconst response=await fetch('/api/notifications/unsubscribe',{method:'POST',body:JSON.stringify({endpoint:subscription.endpoint}),headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(\"Server responded with status \".concat(response.status));}console.log('User unsubscribed successfully.');}else{console.log('No subscription found.');}}catch(error){console.error('Error unsubscribing from push notifications:',error);}}else{console.warn('Push notifications or service worker are not supported in this browser.');}};","map":{"version":3,"names":["React","useState","useEffect","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","subscribeUser","navigator","window","registration","serviceWorker","ready","existingSubscription","pushManager","getSubscription","response","fetch","method","body","JSON","stringify","endpoint","headers","ok","responseData","json","isSubscribed","console","log","Error","concat","status","applicationServerKey","newSubscription","subscribe","userVisibleOnly","pushSubscription","expirationTime","keys","p256dh","getKey","btoa","String","fromCharCode","auth","subscription","error","warn","unsubscribeUser","unsubscribe"],"sources":["/home/pratibha/Music/Organizer/organizer-app/src/utils/subscribe.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Convert a base64 string to a Uint8Array\nconst urlBase64ToUint8Array = (base64String) => {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\n\n// Subscribe the user to push notifications\nexport const subscribeUser = async () => {\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    try {\n      // Ensure service worker is ready\n      const registration = await navigator.serviceWorker.ready;\n      \n      // Check if there is an existing subscription\n      const existingSubscription = await registration.pushManager.getSubscription();\n\n      if (existingSubscription) {\n        // Check if the subscription is already stored on the server\n        const response = await fetch('/api/notifications/check-subscription', {\n          method: 'POST',\n          body: JSON.stringify({ endpoint: existingSubscription.endpoint }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.ok) {\n          const responseData = await response.json();\n          if (responseData.isSubscribed) {\n            console.log('User is already subscribed');\n            return;\n          }\n        } else {\n          throw new Error(`Server responded with status ${response.status}`);\n        }\n      }\n\n      // Subscribe the user\n      const applicationServerKey = urlBase64ToUint8Array('BA36MmQvZeXCN6SoOkl5JeSVK0ADziCwPOEINUasNfAGOh10wV3CoqHVx7dZBuYQY4TsC_k578Ro3W4djca2GFs');\n      const newSubscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: applicationServerKey\n      });\n\n      // Format subscription for server\n      const pushSubscription = {\n        endpoint: newSubscription.endpoint,\n        expirationTime: newSubscription.expirationTime,\n        keys: {\n          p256dh: newSubscription.getKey('p256dh') ? btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('p256dh')))) : '',\n          auth: newSubscription.getKey('auth') ? btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('auth')))) : ''\n        }\n      };\n\n      // Send the subscription to your server\n      const response = await fetch('/api/notifications/subscribe', {\n        method: 'POST',\n        body: JSON.stringify({ subscription: pushSubscription }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server responded with status ${response.status}`);\n      }\n\n      const responseData = await response.json();\n      console.log('Server response:', responseData);\n\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n    }\n  } else {\n    console.warn('Push notifications or service worker are not supported in this browser.');\n  }\n};\n\n// Unsubscribe the user from push notifications\nexport const unsubscribeUser = async () => {\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n\n      if (subscription) {\n        await subscription.unsubscribe();\n\n        // Notify the server to remove the subscription\n        const response = await fetch('/api/notifications/unsubscribe', {\n          method: 'POST',\n          body: JSON.stringify({ endpoint: subscription.endpoint }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error(`Server responded with status ${response.status}`);\n        }\n\n        console.log('User unsubscribed successfully.');\n      } else {\n        console.log('No subscription found.');\n      }\n    } catch (error) {\n      console.error('Error unsubscribing from push notifications:', error);\n    }\n  } else {\n    console.warn('Push notifications or service worker are not supported in this browser.');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}