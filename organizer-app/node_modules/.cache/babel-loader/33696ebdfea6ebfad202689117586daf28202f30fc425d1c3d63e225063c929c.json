{"ast":null,"code":"const urlBase64ToUint8Array = base64String => {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\nexport const subscribeUser = async () => {\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const existingSubscription = await registration.pushManager.getSubscription();\n      if (existingSubscription) {\n        console.log('User is already subscribed');\n        // Optionally: Send request to update subscription if server-side changes\n        return;\n      }\n      const newSubscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array('BA36MmQvZeXCN6SoOkl5JeSVK0ADziCwPOEINUasNfAGOh10wV3CoqHVx7dZBuYQY4TsC_k578Ro3W4djca2GFs')\n      });\n      const pushSubscription = {\n        endpoint: newSubscription.endpoint,\n        expirationTime: newSubscription.expirationTime,\n        keys: {\n          p256dh: newSubscription.getKey('p256dh') ? btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('p256dh')))) : '',\n          auth: newSubscription.getKey('auth') ? btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('auth')))) : ''\n        }\n      };\n      const response = await fetch('/api/notifications/subscribe', {\n        method: 'POST',\n        body: JSON.stringify({\n          subscription: pushSubscription\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Server responded with status ${response.status}`);\n      }\n      const responseData = await response.json();\n      console.log('Server response:', responseData);\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n    }\n  } else {\n    console.warn('Push notifications or service worker are not supported in this browser.');\n  }\n};\nexport const unsubscribeUser = async () => {\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n      if (subscription) {\n        await subscription.unsubscribe();\n\n        // Notify server to remove subscription\n        await fetch('/api/notifications/unsubscribe', {\n          method: 'POST',\n          body: JSON.stringify({\n            endpoint: subscription.endpoint\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error unsubscribing from push notifications:', error);\n    }\n  } else {\n    console.warn('Push notifications or service worker are not supported in this browser.');\n  }\n};","map":{"version":3,"names":["urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","subscribeUser","navigator","window","registration","serviceWorker","ready","existingSubscription","pushManager","getSubscription","console","log","newSubscription","subscribe","userVisibleOnly","applicationServerKey","pushSubscription","endpoint","expirationTime","keys","p256dh","getKey","btoa","String","fromCharCode","auth","response","fetch","method","body","JSON","stringify","subscription","headers","ok","Error","status","responseData","json","error","warn","unsubscribeUser","unsubscribe"],"sources":["/home/pratibha/Pictures/Organizer/organizer-app/src/utils/subscribe.js"],"sourcesContent":["const urlBase64ToUint8Array = (base64String) => {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\n\nexport const subscribeUser = async () => {\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const existingSubscription = await registration.pushManager.getSubscription();\n\n      if (existingSubscription) {\n        console.log('User is already subscribed');\n        // Optionally: Send request to update subscription if server-side changes\n        return;\n      }\n\n      const newSubscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array('BA36MmQvZeXCN6SoOkl5JeSVK0ADziCwPOEINUasNfAGOh10wV3CoqHVx7dZBuYQY4TsC_k578Ro3W4djca2GFs')\n      });\n\n      const pushSubscription = {\n        endpoint: newSubscription.endpoint,\n        expirationTime: newSubscription.expirationTime,\n        keys: {\n          p256dh: newSubscription.getKey('p256dh') ? btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('p256dh')))) : '',\n          auth: newSubscription.getKey('auth') ? btoa(String.fromCharCode(...new Uint8Array(newSubscription.getKey('auth')))) : ''\n        }\n      };\n\n      const response = await fetch('/api/notifications/subscribe', {\n        method: 'POST',\n        body: JSON.stringify({ subscription: pushSubscription }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server responded with status ${response.status}`);\n      }\n\n      const responseData = await response.json();\n      console.log('Server response:', responseData);\n\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n    }\n  } else {\n    console.warn('Push notifications or service worker are not supported in this browser.');\n  }\n};\n\n\nexport const unsubscribeUser = async () => {\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n\n      if (subscription) {\n        await subscription.unsubscribe();\n\n        // Notify server to remove subscription\n        await fetch('/api/notifications/unsubscribe', {\n          method: 'POST',\n          body: JSON.stringify({ endpoint: subscription.endpoint }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error unsubscribing from push notifications:', error);\n    }\n  } else {\n    console.warn('Push notifications or service worker are not supported in this browser.');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}